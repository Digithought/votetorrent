import { count1s, first0, setOccupancy, clearOccupancy, setFirstNOccupied } from "./occupancy";

describe("Occupancy", () => {
    test("Should count 1s", () => {
        const occ = [0b11110000111100001111000011110000, 0b11110000111100001111000011110000];
        expect(count1s(occ)).toBe(32);
    });

    test("First 1 - 1nd in first word", () => {
        const occ = [0b00000000000000000000000000000000, 0b00000000000000000000000000000000];
        expect(first0(occ)).toBe(0);
    });

    test("First 1 - 2nd in first word", () => {
        const occ = [0b10000000000000000000000000000000, 0b00000000000000000000000000000000];
        expect(first0(occ)).toBe(1);
    });

    test("First 1 - end first word", () => {
        const occ = [0b11111111111111111111111111111110, 0b11111111111111111111111111111111];
        expect(first0(occ)).toBe(31);
    });

    test("First 1 - 1st in second word", () => {
        const occ = [0b11111111111111111111111111111111, 0b01111111111111111111111111111111];
        expect(first0(occ)).toBe(32);
    });

    test("First 1 - end in second word", () => {
        const occ = [0b11111111111111111111111111111111, 0b11111111111111111111111111111110];
        expect(first0(occ)).toBe(63);
    });

    test("First 1 - none", () => {
        const occ = [0b11111111111111111111111111111111, 0b11111111111111111111111111111111];
        expect(first0(occ)).toBe(-1);
    });

    test("Set 1 - 1st in first ", () => {
        const occ = [0b01111111111111111111111111111111, 0b11111111111111111111111111111111];
        setOccupancy(occ, 0);
        expect(occ).toEqual([0b11111111111111111111111111111111, 0b11111111111111111111111111111111]);
    });

    test("Set 1 - 1st in second", () => {
        const occ = [0b11111111111111111111111111111111, 0b01111111111111111111111111111111];
        setOccupancy(occ, 32);
        expect(occ).toEqual([0b11111111111111111111111111111111, 0b11111111111111111111111111111111]);
    });

    test("Set 1 - last in first", () => {
        const occ = [0b11111111111111111111111111111110, 0b11111111111111111111111111111111];
        setOccupancy(occ, 31);
        expect(occ).toEqual([0b11111111111111111111111111111111, 0b11111111111111111111111111111111]);
    });

    test("Set 1 - last in second", () => {
        const occ = [0b11111111111111111111111111111111, 0b11111111111111111111111111111110];
        setOccupancy(occ, 63);
        expect(occ).toEqual([0b11111111111111111111111111111111, 0b11111111111111111111111111111111]);
    });

    test("Set 0 - all", () => {
        const occ = [0, 0];
        for (let i = 0; i < 64; ++i) {
            setOccupancy(occ, i);
        }
        expect(occ).toEqual([0b11111111111111111111111111111111, 0b11111111111111111111111111111111]);
    });

    test("Set First N - 0", () => {
        const occ = [0b00000000000000000000000011110000, 0b00000000000000000000000011110000];
        setFirstNOccupied(occ, 0);
        expect(occ).toEqual([0b00000000000000000000000011110000, 0b00000000000000000000000011110000]);
    });

    test("Set First N - 1", () => {
        const occ = [0b00000000000000000000000011110000, 0b00000000000000000000000011110000];
        setFirstNOccupied(occ, 1);
        expect(occ).toEqual([0b10000000000000000000000011110000, 0b00000000000000000000000011110000]);
    });

    test("Set First N - 32", () => {
        const occ = [0b00000000000000000000000011110000, 0b00000000000000000000000011110000];
        setFirstNOccupied(occ, 32);
        expect(occ).toEqual([0b11111111111111111111111111111111, 0b00000000000000000000000011110000]);
    });

    test("Set First N - 33", () => {
        const occ = [0b00000000000000000000000011110000, 0b00000000000000000000000011110000];
        setFirstNOccupied(occ, 33);
        expect(occ).toEqual([0b11111111111111111111111111111111, 0b10000000000000000000000011110000]);
    });

    test("Set First N - 63", () => {
        const occ = [0b00000000000000000000000011110000, 0b00000000000000000000000011110000];
        setFirstNOccupied(occ, 64);
        expect(occ).toEqual([0b11111111111111111111111111111111, 0b11111111111111111111111111111111]);
    });

    test("Clear 0", () => {
        const occ = [0b11111111111111111111111111111111, 0b11111111111111111111111111111111];
        clearOccupancy(occ, 0);
        expect(occ).toEqual([0b01111111111111111111111111111111, 0b11111111111111111111111111111111]);
    });

    test("Clear 31", () => {
        const occ = [0b11111111111111111111111111111111, 0b11111111111111111111111111111111];
        clearOccupancy(occ, 31);
        expect(occ).toEqual([0b11111111111111111111111111111110, 0b11111111111111111111111111111111]);
    });

    test("Clear 32", () => {
        const occ = [0b11111111111111111111111111111111, 0b11111111111111111111111111111111];
        clearOccupancy(occ, 32);
        expect(occ).toEqual([0b11111111111111111111111111111111, 0b01111111111111111111111111111111]);
    });

    test("Clear 63", () => {
        const occ = [0b11111111111111111111111111111111, 0b11111111111111111111111111111111];
        clearOccupancy(occ, 63);
        expect(occ).toEqual([0b11111111111111111111111111111111, 0b11111111111111111111111111111110]);
    });

    test("Clear 0 - all", () => {
        const occ = [0b11111111111111111111111111111111, 0b11111111111111111111111111111111];
        for (let i = 0; i < 64; ++i) {
            clearOccupancy(occ, i);
        }
        expect(occ).toEqual([0b00000000000000000000000000000000, 0b00000000000000000000000000000000]);
    });
})
